/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/playlists/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my playlists
         * @deprecated
         */
        get: operations["PlaylistsController_getMyPlaylists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all playlists
         * @description Query parameters must conform to the **GetPlaylistsRequestPayload** schema.
         */
        get: operations["PlaylistsPublicController_getPlaylists"];
        put?: never;
        /** Create a new playlist */
        post: operations["PlaylistsController_createPlaylist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single playlist by ID */
        get: operations["PlaylistsPublicController_getPlaylistById"];
        /** Update a playlist */
        put: operations["PlaylistsController_updatePlaylist"];
        post?: never;
        /** Delete a playlist */
        delete: operations["PlaylistsController_deletePlaylist"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Reorder playlists */
        put: operations["PlaylistsController_reorderPlaylist"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/images/main": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload playlist cover
         * @description Minimum height — 500px; image must be square
         */
        post: operations["PlaylistsController_uploadMainImage"];
        /** Delete playlist cover */
        delete: operations["PlaylistsController_deleteTrackCover"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/tracks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all tracks in all playlists */
        get: operations["TracksPublicController_getAllTracks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/tracks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of tracks in a playlist */
        get: operations["TracksPublicController_getPlaylistTracks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/tracks/{trackId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get track details by ID */
        get: operations["TracksPublicController_getTrackDetails"];
        /** Update track information */
        put: operations["TracksController_updateTrack"];
        post?: never;
        /** Permanently delete a track */
        delete: operations["TracksController_deleteTrackCompletely"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/tracks/{trackId}/likes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Like or toggle like on a track */
        post: operations["TracksPublicController_likeTrack"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/tracks/{trackId}/dislikes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Dislike or toggle dislike on a track */
        post: operations["TracksPublicController_dislikeTrack"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/tracks/{trackId}/reactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove user reaction from a track */
        delete: operations["TracksPublicController_removeTrackReaction"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/likes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Like a playlist */
        post: operations["PlaylistsPublicController_likePlaylist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/dislikes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Dislike a playlist */
        post: operations["PlaylistsPublicController_dislikePlaylist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/reactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove user reaction from a playlist */
        delete: operations["PlaylistsPublicController_removePlaylistReaction"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/tracks/{trackId}/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Reorder tracks in a playlist */
        put: operations["TracksController_reorderTrack"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/relationships/tracks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a track to your playlist */
        post: operations["TracksController_addTrackToPlaylist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{playlistId}/relationships/tracks/{trackId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove a track from your playlist */
        delete: operations["TracksController_unbindTrackFromPlaylist"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/tracks/{trackId}/actions/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Publish a track (make it publicly available) */
        post: operations["TracksController_publishTrack"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/tracks/{trackId}/cover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload track cover */
        post: operations["TracksController_uploadTrackCover"];
        /** Delete track cover */
        delete: operations["TracksController_deleteTrackCover"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/tracks/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a track with MP3 file upload */
        post: operations["TracksController_uploadTrackMp3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new artist */
        post: operations["ArtistsController_createArtist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search artists by substring */
        get: operations["ArtistsController_searchArtist"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete an artist by ID */
        delete: operations["ArtistsController_deleteArtist"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/oauth-redirect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * OAuth redirect
         * @description The callback URL to redirect after granting access, <a target="_blank" href="https://oauth.apihub.it-incubator.io/realms/apihub/protocol/openid-connect/auth?client_id=musicfun&response_type=code&redirect_uri=http://localhost:3000/oauth2/callback&scope=openid">https://oauth.apihub.it-incubator.io/realms/apihub/protocol/openid-connect/auth?client_id=musicfun&response_type=code&redirect_uri=http://localhost:3000/oauth2/callback&scope=openid</a>
         */
        get: operations["AuthController_OauthRedirect"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log in using the code received after OAuth authorization redirect */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh refresh/access token pair */
        post: operations["AuthController_refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deactivate refresh token */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user by access token */
        get: operations["AuthController_getMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new tag */
        post: operations["TagsController_createTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search tags by substring */
        get: operations["TagsController_searchTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a tag by ID */
        delete: operations["TagsController_deleteTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserOutputDTO: {
            /** @description Unique identifier of the user */
            id: string;
            /** @description Name of the user */
            name: string;
        };
        /**
         * @description Type of the image size (e.g., original, thumbnail variants)
         * @enum {string}
         */
        ImageSizeType: "original" | "thumbnail" | "medium";
        ImageDto: {
            /** @description Type of the image size (e.g., original, thumbnail variants) */
            type: components["schemas"]["ImageSizeType"];
            /** @description Image width in pixels */
            width: number;
            /** @description Image height in pixels */
            height: number;
            /** @description Image file size in bytes */
            fileSize: number;
            /** @description Full public URL of the image */
            url: string;
        };
        PlaylistImagesOutputDTO: {
            /** @description Original images and thumbnail previews */
            main?: components["schemas"]["ImageDto"][];
        };
        GetTagOutput: {
            /** @description Unique identifier of the tag */
            id: string;
            /** @description Original name of the tag */
            name: string;
        };
        /**
         * @description User reaction: 0 – guest or no reaction; 1 – like; -1 – dislike
         * @enum {number}
         */
        ReactionValue: 0 | 1 | -1;
        PlaylistAttributesDto: {
            /** @description Title of the playlist */
            title: string;
            /** @description Description of the playlist */
            description: string | null;
            /**
             * Format: date-time
             * @description Date and time when the playlist was added (ISO 8601)
             */
            addedAt: string;
            /**
             * Format: date-time
             * @description Date and time when the playlist was last updated (ISO 8601)
             */
            updatedAt: string;
            /** @description Order index of the playlist */
            order: number;
            /** @description User who created the playlist */
            user: components["schemas"]["UserOutputDTO"];
            /** @description Images associated with the playlist */
            images: components["schemas"]["PlaylistImagesOutputDTO"];
            /** @description Tags linked to the playlist */
            tags: components["schemas"]["GetTagOutput"][];
            /** @description Total number of likes for this playlist */
            likesCount: number;
            /** @description Total number of dislikes for this playlist */
            dislikesCount: number;
            /** @description User reaction: 0 – guest or no reaction; 1 – like; -1 – dislike */
            currentUserReaction: components["schemas"]["ReactionValue"];
        };
        PlaylistListItemJsonApiData: {
            /** @description Unique identifier of the playlist */
            id: string;
            /**
             * @description Resource type (should be "playlists")
             * @example playlists
             */
            type: string;
            /** @description Attributes of the playlist resource */
            attributes: components["schemas"]["PlaylistAttributesDto"];
        };
        GetMyPlaylistsOutput: {
            /** @description Array of playlist resource objects owned by the current user */
            data: components["schemas"]["PlaylistListItemJsonApiData"][];
        };
        CreatePlaylistRequestPayload: {
            /** @description Playlist title (1 to 100 characters) */
            title: string;
            /** @description Playlist description (up to 1000 characters) */
            description: string | null;
        };
        PlaylistOutputAttributes: {
            /** @description Title of the playlist */
            title: string;
            /** @description Description of the playlist */
            description: string | null;
            /**
             * Format: date-time
             * @description Date and time when the playlist was added (ISO 8601)
             */
            addedAt: string;
            /**
             * Format: date-time
             * @description Date and time when the playlist was last updated (ISO 8601)
             */
            updatedAt: string;
            /** @description Order index of the playlist */
            order: number;
            /** @description User who created the playlist */
            user: components["schemas"]["UserOutputDTO"];
            /** @description Images associated with the playlist */
            images: components["schemas"]["PlaylistImagesOutputDTO"];
            /** @description Tags linked to the playlist */
            tags: components["schemas"]["GetTagOutput"][];
            /** @description Total number of likes for this playlist */
            likesCount: number;
            /** @description Total number of dislikes for this playlist */
            dislikesCount: number;
            /** @description User reaction: 0 – guest or no reaction; 1 – like; -1 – dislike */
            currentUserReaction: components["schemas"]["ReactionValue"];
        };
        PlaylistOutput: {
            /** @description Unique identifier of the playlist */
            id: string;
            /**
             * @description Resource type (should be "playlists")
             * @example playlists
             */
            type: string;
            /** @description Playlist attributes object */
            attributes: components["schemas"]["PlaylistOutputAttributes"];
        };
        GetPlaylistOutput: {
            /** @description JSON:API single-resource response wrapper */
            data: components["schemas"]["PlaylistOutput"];
        };
        UpdatePlaylistRequestPayload: {
            /** @description Playlist title (1 – 100 characters) */
            title: string;
            /**
             * @description Playlist description (up to 1000 characters)
             * @example Cool playlist
             */
            description: string | null;
            /** @description Tag IDs to associate with the playlist (0 – 5 items; [] = clear tags) */
            tagIds: string[];
        };
        ReorderPlaylistsRequestPayload: {
            /**
             * Format: uuid
             * @description ID of the playlist after which the current playlist should be inserted. Send null to place the playlist at the beginning of the list.
             */
            putAfterItemId: string | null;
        };
        GetImagesOutput: {
            /** @description List of original images and thumbnail versions (e.g., original, 320x180, etc.) */
            main?: components["schemas"]["ImageDto"][];
        };
        GetTracksRequestPayload: {
            /**
             * @description Page number for pagination (starting from 1)
             * @default 1
             */
            pageNumber: number;
            /**
             * @description Page size for pagination (between 1 and 20)
             * @default 20
             */
            pageSize: number;
            /** @description Search term for filtering playlists by name */
            search?: string;
            /**
             * @description Field by which to sort tracks
             * @default publishedAt
             * @enum {string}
             */
            sortBy: "publishedAt" | "likesCount";
            /**
             * @description Sort direction (ascending or descending)
             * @default desc
             * @enum {string}
             */
            sortDirection: "asc" | "desc";
            /** @description Filter by tag IDs (multiple values allowed) */
            tagsIds?: string[];
            /** @description Filter by artist IDs (multiple values allowed) */
            artistsIds?: string[];
            /** @description Filter by user ID (track creator's ID) */
            userId?: string;
            /** @description If true, include unpublished tracks (drafts) of current user if userId === currentUserId */
            includeDrafts?: boolean;
            /**
             * @description Pagination type: "offset" for page-number pagination; "cursor" for keyset/seek-based pagination.
             * @default offset
             * @enum {string}
             */
            paginationType: "offset" | "cursor";
            /** @description Base64-encoded cursor for keyset pagination. Used only if paginationType is "cursor". */
            cursor?: string | null;
        };
        AttachmentDto: {
            /** @description Unique identifier of the entity */
            id: string;
            /**
             * Format: date-time
             * @description Date and time when the entity was added
             */
            addedAt: string;
            /**
             * Format: date-time
             * @description Date and time when the entity was last updated
             */
            updatedAt: string;
            /** @description Version number of the entity (for concurrency control) */
            version: number;
            /**
             * @description Public URL to access the uploaded file
             * @example https://cdn.example.com/uploads/track123/cover.jpg
             */
            url: string;
            /**
             * @description MIME type of the file
             * @example image/jpeg
             */
            contentType: string;
            /**
             * @description Original filename uploaded by the user
             * @example cover.jpg
             */
            originalName: string;
            /**
             * @description Size of the file in bytes
             * @example 34872
             */
            fileSize: number;
        };
        TrackListItemOutputAttributes: {
            title: string;
            addedAt: string;
            likesCount: number;
            attachments: components["schemas"]["AttachmentDto"][];
            images: components["schemas"]["GetImagesOutput"];
            user: components["schemas"]["UserOutputDTO"];
            /**
             * @description 0 – не залогинен или не реагировал; 1 – лайк; −1 – дизлайк
             * @enum {number}
             */
            currentUserReaction: 0 | 1 | -1;
            isPublished: boolean;
            publishedAt?: string;
        };
        ArtistRelationship: {
            id: string;
            type: string;
        };
        ArtistsRelationship: {
            data: components["schemas"]["ArtistRelationship"][];
        };
        TrackRelationships: {
            artists: components["schemas"]["ArtistsRelationship"];
        };
        TrackListItemOutput: {
            id: string;
            /** @example tracks */
            type: string;
            attributes: components["schemas"]["TrackListItemOutputAttributes"];
            relationships: components["schemas"]["TrackRelationships"];
        };
        JsonApiMetaWithPagingAndCursor: {
            page: number;
            pageSize: number;
            /** @description Total count may be absent when using keyset pagination */
            totalCount: number | null;
            /** @description Total number of pages */
            pagesCount: number | null;
            /** @description Cursor for the next page */
            nextCursor: string | null;
        };
        OmitTypeClass: {
            /** @description Name of the artist */
            name: string;
        };
        IncludedArtistOutput: {
            id: string;
            type: string;
            attributes: components["schemas"]["OmitTypeClass"];
        };
        GetTrackListOutput: {
            data: components["schemas"]["TrackListItemOutput"][];
            meta: components["schemas"]["JsonApiMetaWithPagingAndCursor"];
            included: components["schemas"]["IncludedArtistOutput"][];
        };
        PlaylistTrackAttributes: {
            /** @description Title of the track */
            title: string;
            /** @description Order index of the track in the playlist */
            order: number;
            /**
             * Format: date-time
             * @description Date and time when the track was added to the playlist (ISO 8601)
             */
            addedAt: string;
            /**
             * Format: date-time
             * @description Date and time when the track was last updated in the playlist (ISO 8601)
             */
            updatedAt: string;
            /** @description Attachments related to the track */
            attachments: components["schemas"]["AttachmentDto"][];
            /** @description Images associated with the track */
            images: components["schemas"]["GetImagesOutput"];
            /**
             * @description User reaction: 0 – guest or no reaction; 1 – liked; -1 – disliked
             * @enum {number|null}
             */
            currentUserReaction: 0 | 1 | -1 | null;
        };
        GetPlaylistTrackListOutputData: {
            id: string;
            /** @example tracks */
            type: string;
            attributes: components["schemas"]["PlaylistTrackAttributes"];
            relationships: components["schemas"]["TrackRelationships"];
        };
        JsonApiMeta: {
            totalCount: number;
        };
        GetPlaylistTrackListOutput: {
            data: components["schemas"]["GetPlaylistTrackListOutputData"][];
            meta: components["schemas"]["JsonApiMeta"];
            included: components["schemas"]["IncludedArtistOutput"][];
        };
        GetArtistOutput: {
            /** @description Unique identifier of the artist */
            id: string;
            /** @description Name of the artist */
            name: string;
        };
        TrackDetailsAttributes: {
            /** @description Track title */
            title: string;
            /** @description Track lyrics text */
            lyrics?: string | null;
            /**
             * Format: date-time
             * @description Release date in ISO 8601 format
             */
            releaseDate?: string | null;
            /**
             * Format: date-time
             * @description Date and time when the track was added (ISO 8601)
             */
            addedAt: string;
            /**
             * Format: date-time
             * @description Date and time when the track was last updated (ISO 8601)
             */
            updatedAt: string;
            /** @description Duration of the track in seconds */
            duration: number;
            /** @description Total number of likes for this track */
            likesCount: number;
            /**
             * @deprecated
             * @description Total number of dislikes for this track
             */
            dislikesCount: number;
            /** @description List of attachments related to the track */
            attachments: components["schemas"]["AttachmentDto"][];
            /** @description Images associated with the track */
            images: components["schemas"]["GetImagesOutput"];
            /** @description Tags associated with the track */
            tags: components["schemas"]["GetTagOutput"][];
            /** @description Artists associated with the track */
            artists: components["schemas"]["GetArtistOutput"][];
            user: components["schemas"]["UserOutputDTO"];
            /** @description Publication status of the track */
            isPublished: boolean;
            /**
             * Format: date-time
             * @description Publication date in ISO 8601 format
             */
            publishedAt?: string | null;
            /**
             * @description User reaction: 0 – guest or no reaction; 1 – user liked; -1 – user disliked
             * @enum {number}
             */
            currentUserReaction: 0 | 1 | -1;
        };
        TrackDetailsData: {
            /** @description Unique identifier of the track */
            id: string;
            /**
             * @description Resource type (should be "tracks")
             * @example tracks
             */
            type: string;
            /** @description Detailed attributes of the track resource */
            attributes: components["schemas"]["TrackDetailsAttributes"];
        };
        GetTrackDetailsOutput: {
            /** @description JSON:API single-track details response wrapper */
            data: components["schemas"]["TrackDetailsData"];
        };
        ReactionOutput: {
            objectId: string;
            /** @enum {number} */
            value: 0 | 1 | -1;
            likes: number;
            dislikes: number;
        };
        GetPlaylistsRequestPayload: {
            /**
             * @description Page number for pagination (starting from 1)
             * @default 1
             */
            pageNumber: number;
            /**
             * @description Page size for pagination (between 1 and 20)
             * @default 20
             */
            pageSize: number;
            /** @description Search term for filtering playlists by name */
            search?: string;
            /**
             * @description Field by which to sort playlists
             * @default addedAt
             * @enum {string}
             */
            sortBy: "addedAt" | "likesCount";
            /**
             * @description Sort direction (ascending or descending)
             * @default desc
             * @enum {string}
             */
            sortDirection: "asc" | "desc";
            /** @description Filter by tag IDs. Multiple values allowed, e.g.: tagsIds=tag1&tagsIds=tag2 */
            tagsIds?: string[];
            /** @description Filter by user ID (playlist creator’s ID) */
            userId?: string;
            /** @description Filter by track ID – only playlists containing this track will be returned */
            trackId?: string;
        };
        JsonApiMetaWithPaging: {
            totalCount: number;
            page: number;
            pageSize: number;
            pagesCount: number;
        };
        GetPlaylistsOutput: {
            /** @description Array of playlist resource objects */
            data: components["schemas"]["PlaylistListItemJsonApiData"][];
            /** @description Pagination metadata for the playlists list */
            meta: components["schemas"]["JsonApiMetaWithPaging"];
        };
        ReorderTracksRequestPayload: {
            /**
             * Format: uuid
             * @description ID of the track after which the current track should be inserted. Send null to place the track at the beginning of the list.
             * @example a1b2c3d4-e5f6-7890-abcd-1234567890ef
             */
            putAfterItemId: string | null;
        };
        UpdateTrackRequestPayload: {
            /** @description Track title (1 to 100 characters) */
            title: string;
            /** @description Track lyrics (up to 5000 characters) */
            lyrics: string | null;
            /**
             * Format: date-time
             * @description Release date in ISO 8601 format
             */
            releaseDate: string | null;
            /** @description Array of tag IDs to associate with the track (up to 5) */
            tagIds: string[];
            /** @description Array of artist IDs to associate with the track (up to 5) */
            artistsIds: string[];
        };
        TrackOutputAttributes: {
            /** @description Track title */
            title: string;
            /** @description Track lyrics text */
            lyrics?: string | null;
            /**
             * Format: date-time
             * @description Release date in ISO 8601 format
             */
            releaseDate?: string | null;
            /**
             * Format: date-time
             * @description Date and time when the track was added (ISO 8601)
             */
            addedAt: string;
            /**
             * Format: date-time
             * @description Date and time when the track was last updated (ISO 8601)
             */
            updatedAt: string;
            /** @description Duration of the track in seconds */
            duration: number;
            /** @description Total number of likes for this track */
            likesCount: number;
            /**
             * @deprecated
             * @description Total number of dislikes for this track
             */
            dislikesCount: number;
            /** @description List of attachments related to the track */
            attachments: components["schemas"]["AttachmentDto"][];
            /** @description Images associated with the track */
            images: components["schemas"]["GetImagesOutput"];
            /** @description Tags associated with the track */
            tags: components["schemas"]["GetTagOutput"][];
            /** @description Artists associated with the track */
            artists: components["schemas"]["GetArtistOutput"][];
            user: components["schemas"]["UserOutputDTO"];
            /** @description Publication status of the track */
            isPublished: boolean;
            /**
             * Format: date-time
             * @description Publication date in ISO 8601 format
             */
            publishedAt?: string | null;
            /**
             * @description User reaction: 0 – guest or no reaction; 1 – user liked; -1 – user disliked
             * @enum {number}
             */
            currentUserReaction: 0 | 1 | -1;
        };
        TrackOutput: {
            /** @description Unique identifier of the track */
            id: string;
            /**
             * @description Resource type (should be "tracks")
             * @example tracks
             */
            type: string;
            /** @description Attributes of the track resource */
            attributes: components["schemas"]["TrackOutputAttributes"];
        };
        GetTrackOutput: {
            /** @description JSON:API single-track response wrapper */
            data: components["schemas"]["TrackOutput"];
        };
        AddTrackToPlaylistRequestPayload: {
            /** @description ID of the track to add to the playlist */
            trackId: string;
        };
        CreateArtistRequestPayload: {
            /** @description Artist name (must be between 2 and 30 characters) */
            name: string;
        };
        LoginRequestPayload: {
            /** @description Код, полученный от oauth-сервер после редиректа */
            code: string;
            /**
             * @description Укажите тоже значение, что и во время первого запроса на oauth-сервер
             * @example http://localhost:3000/oauth2/callback
             */
            redirectUri: string;
            /**
             * @description Срок жизни accessToken-а (по дефолту "3m"), Можно использовать значение в формате: be a string like "60s", "3m", "2h", "1d"
             * @example 3m
             */
            accessTokenTTL?: string;
            /** @description Как долго будет жить refreshToken. Если true - 1 месяц, если false - 30 минут. Явно указанный accessTokenTTL не должен быть больше, чем время жизни refreshToken */
            rememberMe: boolean;
        };
        RefreshOutput: {
            refreshToken: string;
            accessToken: string;
        };
        BadRequestException: Record<string, never>;
        UnauthorizedException: Record<string, never>;
        RefreshRequestPayload: {
            refreshToken: string;
        };
        LogoutRequestPayload: {
            refreshToken: string;
        };
        GetMeOutput: {
            userId: string;
            login: string;
        };
        CreateTagRequestPayload: {
            /** @description Tag name (2 to 30 characters) */
            name: string;
        };
        /**
         * Format: binary
         * @description Файл в multipart/form-data
         */
        BinaryFile: string;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaUserOutputDto = components['schemas']['UserOutputDTO'];
export type SchemaImageSizeType = components['schemas']['ImageSizeType'];
export type SchemaImageDto = components['schemas']['ImageDto'];
export type SchemaPlaylistImagesOutputDto = components['schemas']['PlaylistImagesOutputDTO'];
export type SchemaGetTagOutput = components['schemas']['GetTagOutput'];
export type SchemaReactionValue = components['schemas']['ReactionValue'];
export type SchemaPlaylistAttributesDto = components['schemas']['PlaylistAttributesDto'];
export type SchemaPlaylistListItemJsonApiData = components['schemas']['PlaylistListItemJsonApiData'];
export type SchemaGetMyPlaylistsOutput = components['schemas']['GetMyPlaylistsOutput'];
export type SchemaCreatePlaylistRequestPayload = components['schemas']['CreatePlaylistRequestPayload'];
export type SchemaPlaylistOutputAttributes = components['schemas']['PlaylistOutputAttributes'];
export type SchemaPlaylistOutput = components['schemas']['PlaylistOutput'];
export type SchemaGetPlaylistOutput = components['schemas']['GetPlaylistOutput'];
export type SchemaUpdatePlaylistRequestPayload = components['schemas']['UpdatePlaylistRequestPayload'];
export type SchemaReorderPlaylistsRequestPayload = components['schemas']['ReorderPlaylistsRequestPayload'];
export type SchemaGetImagesOutput = components['schemas']['GetImagesOutput'];
export type SchemaGetTracksRequestPayload = components['schemas']['GetTracksRequestPayload'];
export type SchemaAttachmentDto = components['schemas']['AttachmentDto'];
export type SchemaTrackListItemOutputAttributes = components['schemas']['TrackListItemOutputAttributes'];
export type SchemaArtistRelationship = components['schemas']['ArtistRelationship'];
export type SchemaArtistsRelationship = components['schemas']['ArtistsRelationship'];
export type SchemaTrackRelationships = components['schemas']['TrackRelationships'];
export type SchemaTrackListItemOutput = components['schemas']['TrackListItemOutput'];
export type SchemaJsonApiMetaWithPagingAndCursor = components['schemas']['JsonApiMetaWithPagingAndCursor'];
export type SchemaOmitTypeClass = components['schemas']['OmitTypeClass'];
export type SchemaIncludedArtistOutput = components['schemas']['IncludedArtistOutput'];
export type SchemaGetTrackListOutput = components['schemas']['GetTrackListOutput'];
export type SchemaPlaylistTrackAttributes = components['schemas']['PlaylistTrackAttributes'];
export type SchemaGetPlaylistTrackListOutputData = components['schemas']['GetPlaylistTrackListOutputData'];
export type SchemaJsonApiMeta = components['schemas']['JsonApiMeta'];
export type SchemaGetPlaylistTrackListOutput = components['schemas']['GetPlaylistTrackListOutput'];
export type SchemaGetArtistOutput = components['schemas']['GetArtistOutput'];
export type SchemaTrackDetailsAttributes = components['schemas']['TrackDetailsAttributes'];
export type SchemaTrackDetailsData = components['schemas']['TrackDetailsData'];
export type SchemaGetTrackDetailsOutput = components['schemas']['GetTrackDetailsOutput'];
export type SchemaReactionOutput = components['schemas']['ReactionOutput'];
export type SchemaGetPlaylistsRequestPayload = components['schemas']['GetPlaylistsRequestPayload'];
export type SchemaJsonApiMetaWithPaging = components['schemas']['JsonApiMetaWithPaging'];
export type SchemaGetPlaylistsOutput = components['schemas']['GetPlaylistsOutput'];
export type SchemaReorderTracksRequestPayload = components['schemas']['ReorderTracksRequestPayload'];
export type SchemaUpdateTrackRequestPayload = components['schemas']['UpdateTrackRequestPayload'];
export type SchemaTrackOutputAttributes = components['schemas']['TrackOutputAttributes'];
export type SchemaTrackOutput = components['schemas']['TrackOutput'];
export type SchemaGetTrackOutput = components['schemas']['GetTrackOutput'];
export type SchemaAddTrackToPlaylistRequestPayload = components['schemas']['AddTrackToPlaylistRequestPayload'];
export type SchemaCreateArtistRequestPayload = components['schemas']['CreateArtistRequestPayload'];
export type SchemaLoginRequestPayload = components['schemas']['LoginRequestPayload'];
export type SchemaRefreshOutput = components['schemas']['RefreshOutput'];
export type SchemaBadRequestException = components['schemas']['BadRequestException'];
export type SchemaUnauthorizedException = components['schemas']['UnauthorizedException'];
export type SchemaRefreshRequestPayload = components['schemas']['RefreshRequestPayload'];
export type SchemaLogoutRequestPayload = components['schemas']['LogoutRequestPayload'];
export type SchemaGetMeOutput = components['schemas']['GetMeOutput'];
export type SchemaCreateTagRequestPayload = components['schemas']['CreateTagRequestPayload'];
export type SchemaBinaryFile = components['schemas']['BinaryFile'];
export type $defs = Record<string, never>;
export interface operations {
    PlaylistsController_getMyPlaylists: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: List of playlists retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyPlaylistsOutput"];
                };
            };
            /** @description Unauthorized: User not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlaylistsPublicController_getPlaylists: {
        parameters: {
            query?: {
                /** @description Page number for pagination (starting from 1) */
                pageNumber?: number;
                /** @description Page size for pagination (between 1 and 20) */
                pageSize?: number;
                /** @description Search term for filtering playlists by name */
                search?: string;
                /** @description Field by which to sort playlists */
                sortBy?: "addedAt" | "likesCount";
                /** @description Sort direction (ascending or descending) */
                sortDirection?: "asc" | "desc";
                /** @description Filter by tag IDs. Multiple values allowed, e.g.: tagsIds=tag1&tagsIds=tag2 */
                tagsIds?: string[];
                /** @description Filter by user ID (playlist creator’s ID) */
                userId?: string;
                /** @description Filter by track ID – only playlists containing this track will be returned */
                trackId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: JSON:API list of playlists with pagination */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPlaylistsOutput"];
                };
            };
        };
    };
    PlaylistsController_createPlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePlaylistRequestPayload"];
            };
        };
        responses: {
            /** @description Created: Playlist created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPlaylistOutput"];
                };
            };
            /** @description Forbidden: Playlist creation limit exceeded */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlaylistsPublicController_getPlaylistById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the playlist */
                playlistId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: Playlist retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPlaylistOutput"];
                };
            };
            /** @description Not Found: Playlist with the given ID not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlaylistsController_updatePlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlistId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePlaylistRequestPayload"];
            };
        };
        responses: {
            /** @description No Content: Playlist updated successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request: Validation error (e.g., tag limit exceeded) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: You do not have permission to update this playlist */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlaylistsController_deletePlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlistId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content: Playlist deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: Insufficient permissions to delete this playlist */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Playlist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlaylistsController_reorderPlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlistId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReorderPlaylistsRequestPayload"];
            };
        };
        responses: {
            /** @description No Content: Playlist order updated successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Playlist or putAfterItemId not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlaylistsController_uploadMainImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlistId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description Maximum size 1 MB; minimum height 500px; image must be square */
                    file: components["schemas"]["BinaryFile"];
                };
            };
        };
        responses: {
            /** @description OK: Cover uploaded successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetImagesOutput"];
                };
            };
            /** @description Bad Request: Invalid image format or dimensions */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: No permission to upload cover for this playlist */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlaylistsController_deleteTrackCover: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlistId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content: Cover deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: Removing another user’s playlist cover is not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Playlist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TracksPublicController_getAllTracks: {
        parameters: {
            query?: {
                /** @description Page number for pagination (starting from 1) */
                pageNumber?: number;
                /** @description Page size for pagination (between 1 and 20) */
                pageSize?: number;
                /** @description Search term for filtering playlists by name */
                search?: string;
                /** @description Field by which to sort tracks */
                sortBy?: "publishedAt" | "likesCount";
                /** @description Sort direction (ascending or descending) */
                sortDirection?: "asc" | "desc";
                /** @description Filter by tag IDs (multiple values allowed) */
                tagsIds?: string[];
                /** @description Filter by artist IDs (multiple values allowed) */
                artistsIds?: string[];
                /** @description Filter by user ID (track creator's ID) */
                userId?: string;
                /** @description If true, include unpublished tracks (drafts) of current user if userId === currentUserId */
                includeDrafts?: boolean;
                /** @description Pagination type: "offset" for page-number pagination; "cursor" for keyset/seek-based pagination. */
                paginationType?: "offset" | "cursor";
                /** @description Base64-encoded cursor for keyset pagination. Used only if paginationType is "cursor". */
                cursor?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: Paginated list of tracks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTrackListOutput"];
                };
            };
        };
    };
    TracksPublicController_getPlaylistTracks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the playlist to retrieve tracks for */
                playlistId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: List of tracks in the playlist */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPlaylistTrackListOutput"];
                };
            };
            /** @description Not Found: Playlist with the specified ID not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TracksPublicController_getTrackDetails: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the track to retrieve details for */
                trackId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: Track details with attachments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTrackDetailsOutput"];
                };
            };
            /** @description Not Found: Track with the specified ID not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TracksController_updateTrack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTrackRequestPayload"];
            };
        };
        responses: {
            /** @description OK: Track updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTrackOutput"];
                };
            };
            /** @description Bad Request: Tag or artist limit exceeded */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: Editing another user’s track is not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Track or playlist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TracksController_deleteTrackCompletely: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content: Track permanently deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: Deleting another user’s track is not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Track not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TracksPublicController_likeTrack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created: User reaction recorded and counters updated */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReactionOutput"];
                };
            };
            /** @description Bad Request: Invalid track ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized: User not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Track not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TracksPublicController_dislikeTrack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created: User reaction recorded and counters updated */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReactionOutput"];
                };
            };
            /** @description Bad Request: Invalid track ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized: User not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Track not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TracksPublicController_removeTrackReaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: Reaction removed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReactionOutput"];
                };
            };
            /** @description Unauthorized: User not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlaylistsPublicController_likePlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlistId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created: Like recorded successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReactionOutput"];
                };
            };
            /** @description Bad Request: Invalid playlist ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Playlist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlaylistsPublicController_dislikePlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlistId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created: Dislike recorded successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReactionOutput"];
                };
            };
            /** @description Bad Request: Invalid playlist ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Playlist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlaylistsPublicController_removePlaylistReaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlistId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: Reaction removed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReactionOutput"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Playlist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TracksController_reorderTrack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlistId: string;
                trackId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReorderTracksRequestPayload"];
            };
        };
        responses: {
            /** @description OK: Track order updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request: Cannot place a track after itself */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: No access to the playlist */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Track or putAfterItemId not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TracksController_addTrackToPlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlistId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddTrackToPlaylistRequestPayload"];
            };
        };
        responses: {
            /** @description No Content: Track added to the playlist successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: No access to the playlist or track limit exceeded (max 10 tracks) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Playlist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TracksController_unbindTrackFromPlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlistId: string;
                trackId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content: Track removed from the playlist */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: No access to the playlist */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Playlist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TracksController_publishTrack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content: Track published successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: Publishing another user’s track is not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Track with the specified ID not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict: Track is already published */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TracksController_uploadTrackCover: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the track for which the cover is being uploaded */
                trackId: string;
            };
            cookie?: never;
        };
        /** @description Image file:<br/>
         *             • Field name — <code>cover</code><br/>
         *             • Allowed MIME types — <code>image/jpeg</code>, <code>image/png</code>, <code>image/gif</code><br/>
         *             • Maximum size — <code>100 KB</code> */
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    cover: string;
                };
            };
        };
        responses: {
            /** @description OK: Cover uploaded successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetImagesOutput"];
                };
            };
            /** @description Bad Request: Invalid file or size exceeded */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: Cannot upload a cover for another user’s track */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Track not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TracksController_deleteTrackCover: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content: Cover deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: Removing another user's track cover is not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Track not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TracksController_uploadTrackMp3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @example My cool track */
                    title: string;
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK: Track created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTrackOutput"];
                };
            };
            /** @description Bad Request: Invalid file format or file size exceeded */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error: Error saving file or track */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArtistsController_createArtist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateArtistRequestPayload"];
            };
        };
        responses: {
            /** @description Created: Artist created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetArtistOutput"];
                };
            };
            /** @description Bad Request: Validation error or invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized: User not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: Limit of 100 artists per user reached */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict: Artist with the given name already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArtistsController_searchArtist: {
        parameters: {
            query: {
                search: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: List of artists matching the search */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetArtistOutput"][];
                };
            };
        };
    };
    ArtistsController_deleteArtist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content: Artist deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: Artist is attached to tracks or was created by another user */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Artist with the specified ID not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_OauthRedirect: {
        parameters: {
            query?: {
                /** @description The callback URL to redirect after grand access,
                 *          https://oauth.apihub.it-incubator.io/realms/apihub/protocol/openid-connect/auth?client_id=musicfun&response_type=code&redirect_uri=http://localhost:3000/oauth2/callback&scope=openid */
                callbackUrl?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: Redirect executed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequestPayload"];
            };
        };
        responses: {
            /** @description OK: Token pair retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshOutput"];
                };
            };
            /** @description Bad Request: Invalid request format or required parameters are missing */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Unauthorized: Code is invalid, expired, missing, or redirectUri does not match */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedException"];
                };
            };
        };
    };
    AuthController_refresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshRequestPayload"];
            };
        };
        responses: {
            /** @description OK: Token pair refreshed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshOutput"];
                };
            };
            /** @description Unauthorized: Refresh token is invalid, expired, or missing */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedException"];
                };
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LogoutRequestPayload"];
            };
        };
        responses: {
            /** @description No Content: Refresh token deactivated; access token remains valid. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: Successfully retrieved user information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMeOutput"];
                };
            };
            /** @description Unauthorized: access token is missing or invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TagsController_createTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTagRequestPayload"];
            };
        };
        responses: {
            /** @description Created: Tag created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTagOutput"];
                };
            };
            /** @description Bad Request: Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized: User not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: Limit of 100 tags per user reached */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict: Tag with the given name already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TagsController_searchTags: {
        parameters: {
            query: {
                /** @description Substring to search tags by (using normalized name) */
                search: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: List of matching tags */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTagOutput"][];
                };
            };
            /** @description Bad Request: Invalid search query */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TagsController_deleteTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the tag to delete */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content: Tag deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized: User not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: Tag was created by another user or is attached to tracks or playlists */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found: Tag with the specified ID not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
